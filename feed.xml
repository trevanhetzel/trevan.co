<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-02-16T18:50:04-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Trevan Hetzel</title><subtitle>Trevan Hetzel&apos;s personal blog on software development, web design, wellness, business, and life.</subtitle><entry><title type="html">Our life changing introduction to Functional Medicine</title><link href="http://localhost:4000/our-life-changing-introduction-to-functional-medicine" rel="alternate" type="text/html" title="Our life changing introduction to Functional Medicine" /><published>2024-02-16T00:00:00-06:00</published><updated>2024-02-16T00:00:00-06:00</updated><id>http://localhost:4000/our-life-changing-introduction-to-functional-medicine</id><content type="html" xml:base="http://localhost:4000/our-life-changing-introduction-to-functional-medicine"><![CDATA[<p>Two weeks ago, I sat hopelessly in yet another hospital room trying to console my wife who was in the most agonizing pain to date. Katie’s medical records are thousands of pages long, with diagnoses like fibromyalgia, endometriosis, Lyme disease, non-epileptic seizures, functional neurological disorder, lupus, and more. We’ve been together for 15 years and not one of them has been free from chronic pain for her. We never wanted to, but we started to come to accept that she just “wasn’t normal” and never would be. It seemed like our only option.</p>

<p>We’ve been fighting for so long. Not only the pain and inability to live a normal life, but the gaslighting from doctors telling her nothing’s wrong, the band-aid medications that have side effects that are treated with more pills from big pharma, the smile she had to fake to keep somewhat of a social life, the bills, the mental agony of all of this. As her husband, I feel responsible to fight for her when she just can’t. Two weeks ago she couldn’t fight anymore. Her body had seemingly lost the will to survive and went into the scariest episode we’ve experienced in all these years. I’ve gotten pretty familiar with her symptoms so I generally know when a 911 call is necessitated versus when she’ll ride an episode out.</p>

<p>Even though her eyes were rolled back in her head, her body wouldn’t stop seizing, her pain was unimaginable, it took us a while to finally make the call to send an ambulance. That might seem crazy, but we both knew what was going to happen. We’d get to the ER, they’d run all the emergency tests and make sure she can breath and her heart is still beating, and hit us with the <strong>“there’s nothing wrong with you”</strong> and send us home.</p>

<p>This time, we both refused to leave until they admitted her and tried <em>something</em> to figure out what was causing these episodes and the exhausting life she was living. We begged them to run Lyme tests, admit her to the Mayo clinic, something! They ran through the checklist based on her acute symptoms, and that simply lead us to a recommendation to the pysch ward and another hefy bill refused by our insurance.</p>

<p><strong>Her pain was still excruciating, she was constantly flopping like a fish, and now she <em>could not walk</em>.</strong></p>

<div class="gallery three-col">
  <div class="gallery-item">
    <img src="/assets/images/laying-shaky.gif" alt="Laying in bed shaking" />
    <p class="gallery-description">A glimpse into her shakes</p>
  </div>

  <div class="gallery-item">
    <img src="/assets/images/walker-dancing.gif" alt="Trying walk but dancing" />
    <p class="gallery-description">"Dancing"</p>
  </div>

  <div class="gallery-item">
    <img src="/assets/images/eyes.gif" alt="Seizing eyes" />
    <p class="gallery-description">Uncontrollable eye movement</p>
  </div>
</div>

<h2>The medical system was leading us nowhere</h2>

<p>When you get a beatdown after a beatdown and have countless doctors telling you that your symptoms are simply in your head, you start to believe it. There is no denying that a psychological factor was at play here, but it wasn’t the thing that had gotten her down in the first place. Something was wrong with her body and nobody could figure it out. With Katie set on going home and crawling in a hole in the ground to wither away, I was overwhelmed with determination to get her the help we’ve desperately been looking for. <strong>I was ready to go bankrupt and travel anywhere in the world if it meant I’d get my wife and my boys’ mom back</strong>.</p>

<p>As we sat there feeling helpless in the hospital, I started making calls to “Lyme literate” doctors that I found on <a href="https://www.lymedisease.org/" target="_blank">lymedisease.org</a>. We had an inkling that post-treatment Lyme disease was a factor here, after her normal chronic issues got increasingly worse after she got bit by a tick and was treated for Lyme accutely a couple years back. I started down the familiar path with specialists of making a call, waiting for a nurse to call you back, then two days later booking an appointment for 2-6 months down the road”. How are you supposed to tell an extremely ill person to “hang in there, babe, this place looks promising, just wait another 4 months”? We didn’t have time to wait anymore.</p>

<div class="gallery three-col">
  <div class="gallery-item">
    <img src="/assets/images/hospital-bed-defeated.jpg" />
    <p class="gallery-description">Defeated in an ER</p>
  </div>

  <div class="gallery-item">
    <img src="/assets/images/hospital-bed-hug.jpg" />
    <p class="gallery-description">Our boys have seen the worse of Mom</p>
  </div>

  <div class="gallery-item">
    <img src="/assets/images/hospital-bed-hanging-on.jpg" />
    <p class="gallery-description">Trying to hang in there</p>
  </div>
</div>

<h2>Our intro to functional medicine doc, Dr. Meyer</h2>

<!-- Katie gets a lot of "you should try this" from people who genuinely care and are trying to help. Most of the time, she fakes a smile and says "thanks", then thinks in her head "DON'T YOU THINK I'VE TRIED EVERYTHING?!". -->

<p>Every day we were in the hospital, I was on the phone with my brother brainstorming what to do for Katie. At one point he remarked, seemingly randomly, that there was “a guy” in northern Iowa where his wife is from that has been healing people through this hyperbaric-something-or-another thing. His father in law recently started seeing him and had great things to say about this doctor’s alternative medicine care. I had nothing to lose, and this guy was closer in location than any of the other Lyme docs I had found online, so I made a call to his office.</p>

<p>I realize now that his office probably hears hundreds of pleas like mine when I first called. I was pretty emotional and made it known everything we had tried and every type of doctor we had seen. Their response - <strong>“we understand, we’ve seen this before, and we think we can heal her”</strong>. That’s all I needed to hear and, amazingly, they got us a virtual appointment the next day with Dr. Bradley Meyer.</p>

<p>Right before Dr. Meyer hopped on, Katie found out that we were paying out of pocket for this virtual visit, since insurance companies don’t touch functional medicine clinics. I could see her finger move to the big red end button on her iPhone. She’s riddled with guilt about the financial impact her chronic illness has caused, but I grabbed the phone and told her all that mattered was getting her healthy.</p>

<p>That first visit with Dr. Meyer completely opened our eyes and gave us so much hope that we both decided right then and there we were going to go see him and try his treatments with a completely open minded view. The reassurance that he gave Katie on the phone that she wasn’t “crazy” gave her enough hope to fuel her enough for a few more days to at least try this doctor out.</p>

<p><strong>Three days later, we packed our bags, loaded up the kids, and headed four hours north for a weeklong stay at an Airbnb so Katie could spend eight hours a day in Dr. Meyer’s <a href="https://okobojiwellnessclinic.com/" target="_blank">Okoboji Wellness Clinic.</a></strong></p>

<h2>Relearning what we knew about medicine and our bodies</h2>

<p>When we arrived at the clinic that first morning, we were greeted by Dr. Meyer himself, holding the door open for us. His staff and his wife were the nicest, most caring group of individuals I’d ever encountered in a “doctor’s office”. They were all familiar with Katie’s story by then and it was all hands on deck getting her out of the wheelchair she went in on.</p>

<p>Dr. Meyer explained right off the bat that his approach to healing would look a bit different than what we were probably used to. In traditional medicine, patients are passed around like a hot potato from one specialist to another. If your set of symptoms and surface level bloodwork doesn’t definitively check the box of whatever disease that doctor specializes in, they send you down the road to the next guy (repeated for years, in our case). This isn’t wrong, per se, it’s just how the traditional allopathic medical system works.</p>

<p><strong>Allopathic care (what I always thought of when I thought of “doctors”) is proven for lots of conditions, but functional medicine takes a whole body approach from the ground up that seems to work much better for the type of chronic conditions my wife has experienced.</strong> They are not there to slap a label on your symptoms and prescribe you a pharmaceutical drug, but rather to assess your entire mind, body, and soul and figure out where it isn’t functioning as it should, what it’s lacking, and what to do to get it functioning as God intended.</p>

<p>Given Katie’s medical history (which was definitely important - I don’t want to say that traditional medicine gave us NOTHING), Dr. Meyer initially concluded that, regardless of what disease or label we wanted to call it, her immune system was extremely deflated and her body was riddled with inflammation. He spent almost an hour with us teaching us how the body works and explaining how different environmental, nutritional, psychiological, vaccine, and childhood sickness factors all play a part in how her body responds to inflammation in the present day. He would do more tests and different methods of getting feedback from her body throughout the week to identifies toxins and triggers, but his initial approach was to hit her body hard with treatments to help itself repair from within.</p>

<p>That first day she did a “biostack” consisting of two 90 minute <strong>hyperbaric oxygen chamber treatments</strong>, <strong>red light therapy</strong>, <strong>PEMF therapy</strong>, and <strong>frequency therapy</strong>.</p>

<h2>The importance of nutrition</h2>

<p>I think both Katie and I have tended to pushed nutrition to the side in favor of a more grandious treatment to get her better quick. We always knew it was important and have tried to eat “healthy”, but it wasn’t until we met functional nutritionist Dr. Molly Avery on that Monday that we truly realized the magnitude of how what we eat affects every part of our bodies and how key it was going to be for her healing.</p>

<p>Katie’s system was much too inflamed to just fix it through nutrition, but we were taught by Dr. Avery that it would be impossible for her to ever live a pain-free life if we didn’t take her nutrition as serious as we were about getting her healthy that week.</p>

<h3>Function medicine is all about education</h3>

<p>When I say that Dr. Avery <em>taught</em> us, I mean she <strong>really taught us</strong>. I almost felt as if I were in college again, except the knowledge shared with us was so catered to our current situation that it seemed to click so much better than any other time we had researched nutrition. I can’t overemphasize enough the teachings and knowledge we gained from our week there were. Coming to an understanding of <em>how</em> Katie’s body was working, <em>why</em> it was compromised, and <em>what</em> we could do to heal it was one of the most empowering things for us and something that gave us immense hope right off the bat. I wish more doctors would educate their patients the way that the providers at <a href="https://okobojiwellnessclinic.com/" target="_blank">Okoboji Wellness Clinic</a> did for us.</p>

<p><strong>Dr. Avery urged Katie to cut out gluten, dairy, and refined sugar completely.</strong> This seemed really hard, but her explanations of how each of these affected Katie in a negative way made it totally worth pursuing. We still felt we had nothing to lose here, so we’d follow her recommendations to a T.</p>

<h3>Gluten, dairy, and mollecular mimicry</h3>

<p>At a high level, the way I understood the reasoning for cutting out gluten is that human bodies are no longer able to break down gluten protein molecules properly due to years of genetic modifications which have caused the gluten we consume to be so “compacted” that our bodies can’t break them down fully which leads to excess gluten entering our blood stream and other organs. In Katie’s fragile state, her immune system was responding particularly negatively to gluten and formed antibodies that attacked anything that even mimicked gluten. Which meant her body was attacking otherwise healthy cells because they looked like a threat.</p>

<p>This <strong><a href="https://www.amymyersmd.com/article/molecular-mimicry-autoimmune-disease" target="_blank">molecular mimicry</a></strong> was apparently also induced from dairy and sugar. Regardless of our opinions on no longer eating cheese, we said okay and trusted her. Dr. Avery’s scientific explanation made a lot more sense to us than the standard “don’t eat sugar because it’s bad for you” that we’ve all heard. There really is a reason for it!</p>

<h2>Bio feedback and frequency therapy</h2>

<p>Each of the five days in the clinic consisted of hyperbaric oxygen chamber “dives”, PEMF therapy, red light therapy, and frequency therapy. The frequency therapy is where my “what is this black magic voodoo” alarm bells started going off.</p>

<p>One of the ways in which Dr. Meyer recommended to “test” Katie’s body to uncover potential toxins and triggers was through a bio feedback machine. She spent nearly two hours with a quantum (I think that’s what they called it?) bio feedback expert they brought in. He hooked her up to this machine with bands around her head, wrists, and ankles. I have very little knowledge of how it works (I’m determined to learn more!), but some how through electric frequencies he was able to receive information from Katie’s body. Apparently he could infer the vitality of her cells, how stressed certain parts of her body were, and the presence of bacteria, parasites, molds, toxins, and viruses. They then used the findings from that (coupled with lab draws and physical assesments) to confirm that her body was in this NF-kB (NF kappa beta is how they pronounced it) loop of cosntant inflammation.</p>

<p>They mentioned being able to infer from the bio feedback that a virus Katie had as a baby, cytomeglia virus, was still causing chaos inside her body. I have a hard time believing they inferred that through this weird device , but she did have cytomeglia virus as a baby and that was something we never even considered being part of her current issues. Unfortunately, the bio feedback appointment was the only appointment of the week that I missed, as I stayed back to work at the Airbnb with the boys. Otherwise, I know I would have either geeked out with this guy about his machine or told him to kick rocks because he’s full of it. Either way, Katie thought it was the coolest thing she’s ever done in a medical setting and was astonished by all the details this guy picked up from the scan that were exactly how she felt.</p>

<h3>WellnessPro Plus</h3>

<p>The clinic had several of these WellnessPro Plus machines that “trigger the body’s natural wellness properties”. Basically, they hooked Katie up via sticky electrodes and she held what looked like jump rope handles in each hand. The WellnessPro then sent electric signals or frequencies through her body, targeted at certain cells by whatever set of frequences they programmed it to. This machine (<a href="https://electromedtech.com/products/wellnesspro-plus/" target="_blank">which can be bought for about $4k</a>) has hundreds of different frequency settings that can target specific ailments. Anything from a cough to AIDs 🤣. They ran several protocols on Katie targeted at Lyme, inflammation, and pain.</p>

<p>Again, this seemed really quacky and BS’y to me. But it freaking worked. Every time she did a WellnessPro session she felt better afterwards.</p>

<div class="gallery two-col">
  <div class="gallery-item">
    <img src="/assets/images/wellness-pro-braintap.gif" alt="Quick video Katie took briefly showing the WellnessPro and a BrainTap headset" />
    <p class="gallery-description">Brief view of the WellnessPro and a BrainTap headset</p>
  </div>

  <div class="gallery-item">
    <img src="/assets/images/red-light-therapy.gif" alt="Briefly showing the standup red light therapy lights" />
    <p class="gallery-description">Standing red light therapy</p>
  </div>
</div>

<h2>Hyperbaric Oxygen Therapy</h2>

<p><strong>The treatment that we believe improved her symptoms the most during our stay was hyperbaric oxygen therapy (HBOT).</strong> Katie entered a HBOT chamber for 90 minutes at a time, twice a day. The chamber increased in pressure to 1.3 atmospheres absolute, simulating the amount of pressure of being 10 feet under water. The science behind HBOT is that the increase in atmospheric pressure increases the oxygen level in the blood and ultimately in the body tissues. It’s like a supercharger for your cells and allows your body to heal from the inside out.</p>

<p>I’ve since done a lot of reading and research HBOT and it now comes as no surprise that this treatment likely caused the most healing of all the protocols she started in such a short time. On one of the days, I decided to try out a chamber for myself to see what it was like. I’ve suffered from intense anxiety quite a bit in the past and had some anxiety the day I went for my “dive”. Once I got out, I had never felt better in my life. No joke. My anxiety was gone and I had all the energy and focus in the world. I was totally convinced of HBOT’s healing properties.</p>

<div class="gallery two-col">
  <div class="gallery-item">
    <img src="/assets/images/hyperbaric-oxygen-chamber.jpg" alt="Soft shell mild hyperbaric oxygen chamber" />
    <p class="gallery-description">Mild hyperbaric oxygen chamber</p>
  </div>

  <div class="gallery-item">
    <img src="/assets/images/inside-hyperbaric-oxygen-chamber.jpg" alt="Inside a soft shell mild hyperbaric oxygen chamber" />
    <p class="gallery-description">Inside the hyperbaric oxygen chamber</p>
  </div>
</div>

<h2>Supplement Protocol</h2>

<p>With Katie’s system being so out of whack, Dr. Meyer recommended a supplement protocol to replenish some of the missing links that would help get her body back to normal faster than it could on its own. The protocol includes things like Nitric Balance, Resvero, EnteroVite, Ultra-D (my favorite, hehe), and about 5 other things.</p>

<p>We were both already taking <a href="https://drinkag1.com/">AG1</a> for our daily multivitamin that Jessica, our primary physcian recommended, so that’s still on her list of supplements.</p>

<div class="gallery one-col">
  <div class="gallery-item">
    <img src="/assets/images/supplements.jpg" alt="Dr. Meyer's supplement protocol" />
    <p class="gallery-description">Dr. Meyer's supplement protocol</p>
  </div>
</div>

<h2>The unbelievable effects from functional medicine two weeks later</h2>

<p>To be honest, I was hoping and expecting to walk away from our weeklong visit with a definitive diagnosis of the exact disease that Katie has. I thought to be able to say definitively that she has chronic lyme or lupus, for instance, would help us find the perfect treatment for her. But I learned that the label isn’t so important anymore when approaching healing holistically. Sure, she might have lyme or lupus or fibromyalgia (which I think is a catch-all label when docs don’t know what else is going on), but the way that functional medicine approaches healing is much deeper than the diagnosis. If she does have lyme, that probably means her body is not appropriately fighting off the inflammation it causes. Functional medicine asks “why isn’t her body fighting the inflammation correctly?” and tries to heal the part of the body that’s allowing the lyme to wreak havoc in the first place.</p>

<p>Regardless, I can say with absolute certainty that the treatments and education we received at the Okoboji Wellness Clinic two weeks ago have <em>drastically</em> improved Katie’s life. We went there pleading for help with her in a wheelchair because her brain couldn’t tell her legs to move to leaving with her walking on her own and feeling the best she has in years.</p>

<div class="gallery one-col">
  <div class="gallery-item">
    <img src="/assets/images/katie-dr-meyer.jpg" alt="Katie and Dr. Meyer in front of hyperbaric oxygen chamber" />
    <p class="gallery-description">Katie with Dr. Meyer before we headed home!</p>
  </div>
</div>

<p>We’ve been eating clean and gluten/dairy/sugar free for two weeks now as a family, she’s taking her supplements, and doing hyperbaric oxygen treatments and each day continues to get better for her. I think she’s been living at about 30% of her potential for the past 15 years, 5% when she has “episodes”, and right now is at about 70%. She is so excited to continue to feel better and, for the first time in years, has <strong>HUGE hope</strong>. We will forever be grateful to Dr. Bradley Meyer and the whole staff at Okoboji Wellness Clinic and are continuing to work with him through Katie’s healing.</p>

<p>For me, I am particularly becoming a hyperbaric hype man and want to tell everyone I meet about this HBOT technology. We’re picking up our own in-home chamber in two days!</p>]]></content><author><name></name></author><category term="Wellness" /><summary type="html"><![CDATA[Two weeks ago, I sat hopelessly in yet another hospital room trying to console my wife who was in the most agonizing pain to date. Katie’s medical records are thousands of pages long, with diagnoses like fibromyalgia, endometriosis, Lyme disease, non-epileptic seizures, functional neurological disorder, lupus, and more. We’ve been together for 15 years and not one of them has been free from chronic pain for her. We never wanted to, but we started to come to accept that she just “wasn’t normal” and never would be. It seemed like our only option.]]></summary></entry><entry><title type="html">My essential front-end extensions for Visual Studio Code</title><link href="http://localhost:4000/my-essential-front-end-extensions-for-visual-studio-code" rel="alternate" type="text/html" title="My essential front-end extensions for Visual Studio Code" /><published>2017-05-14T01:00:23-05:00</published><updated>2017-05-14T01:00:23-05:00</updated><id>http://localhost:4000/my-essential-front-end-extensions-for-visual-studio-code</id><content type="html" xml:base="http://localhost:4000/my-essential-front-end-extensions-for-visual-studio-code"><![CDATA[<p>I’ve recently switched from Sublime Text to Visual Studio Code as my primary code editor. As such, I’ve personalized it to feel like home. Here are the most important extensions I use as a front-end developer.</p>

<h2 id="afterglow-remastered"><a href="https://marketplace.visualstudio.com/items?itemName=marvinhagemeister.theme-afterglow-remastered">Afterglow Remastered</a></h2>

<p>This is the color theme I’ve been rocking in Sublime Text for a while, so I was pretty happy to discover it had been ported over to Visual Studio Code.</p>

<h2 id="auto-close-tag"><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">Auto Close Tag</a></h2>

<p>Because who doesn’t want to type <span style="font-family: monospace;"><code class="language-plaintext highlighter-rouge">section + tab</code></span> and have an opening and closing tag ready to use?</p>

<h2 id="autofilename"><a href="https://marketplace.visualstudio.com/items?itemName=JerryHong.autofilename">AutoFileName</a></h2>

<p><code class="language-plaintext highlighter-rouge">import thang from 't</code> ?. No more having to traverse directories to remember what a JavaScript file is called.</p>

<h2 id="babel-es6es7"><a href="https://marketplace.visualstudio.com/items?itemName=dzannotti.vscode-babel-coloring">Babel ES6/ES7</a></h2>

<p>I don’t know about you, but when I write an arrow function I want it to look as sexy as a normal function. This brings that to VS Code.</p>

<h2 id="debugger-for-chrome"><a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome">Debugger for Chrome</a></h2>

<p>Honestly, I haven’t been able to use this extension to its fully (ahem) extent due to the way I compile my files with Webpack. But this is a super sweet looking extension that does great things, nonetheless.</p>

<h2 id="eslint"><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a></h2>

<p>Instead of pushing your code and getting angry that you forgot to run your linter and it failed the CI build, use this extension to see right inline what doesn’t pass your linter config.</p>

<h2 id="git-history-git-log"><a href="https://github.com/DonJayamanne/gitHistoryVSCode">Git History (git log)</a></h2>

<blockquote>
  <p>WHO WAS THE CHUCKLEHEAD THAT WROTE THIS?!?!</p>
</blockquote>

<p>If that’s ever crossed your mind, this plugin is for you. See file by file, line by line who the last modifier was.</p>

<h2 id="material-icon-theme"><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">Material Icon Theme</a></h2>

<p>This brings super clean and pretty icons to the file viewer so you can tell what types of files are what quickly.</p>

<h2 id="postcss-sorting"><a href="https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-postcss-sorting">PostCSS Sorting</a></h2>

<p>I don’t use PostCSS in any of my projects, but that’s okay because this extension just tells me when I screw up my SCSS property order (based on your <code class="language-plaintext highlighter-rouge">.sass-lint.yml)</code> in real time.</p>

<h2 id="project-manager"><a href="https://github.com/alefragnani/vscode-project-manager">Project Manager</a></h2>

<p>This extension allows me to quickly switch between projects AND open a new terminal window (<code class="language-plaintext highlighter-rouge">cmd +</code>` ).</p>

<h2 id="sass-lint"><a href="https://marketplace.visualstudio.com/items?itemName=glen-84.sass-lint">Sass Lint</a></h2>

<p>Similar to the ESLint extension, make sure your Sass is up to par with the standards you set forward in your <code class="language-plaintext highlighter-rouge">.sass-lint.yml</code>.</p>

<h2 id="sublime-text-keymap"><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.sublime-keybindings">Sublime Text Keymap</a></h2>

<p>I was too used to Sublime Text’s keyboard shortcuts that I had to install this. <code class="language-plaintext highlighter-rouge">cmd + 4</code> now opens the fourth tab I have open, like I was used to in Sublime.</p>]]></content><author><name></name></author><category term="CSS" /><category term="JavaScript" /><summary type="html"><![CDATA[I’ve recently switched from Sublime Text to Visual Studio Code as my primary code editor. As such, I’ve personalized it to feel like home. Here are the most important extensions I use as a front-end developer.]]></summary></entry><entry><title type="html">Loading stylesheets in WordPress child themes the fast way</title><link href="http://localhost:4000/loading-stylesheets-in-wordpress-child-themes-the-fast-way" rel="alternate" type="text/html" title="Loading stylesheets in WordPress child themes the fast way" /><published>2017-01-21T19:27:37-06:00</published><updated>2017-01-21T19:27:37-06:00</updated><id>http://localhost:4000/loading-stylesheets-in-wordpress-child-themes-the-fast-way</id><content type="html" xml:base="http://localhost:4000/loading-stylesheets-in-wordpress-child-themes-the-fast-way"><![CDATA[<p>Loading stylesheets in WordPress child themes is a pretty straightforward process. According to the <a href="https://codex.wordpress.org/Child_Themes">Codex</a>, you just add a <code class="language-plaintext highlighter-rouge">wp_enqueue_scripts</code> action that loads the parent theme’s stylesheet as well as the child theme’s stylesheet. Easy peasy.</p>

<p>However, you know me and extra asset requests 😉 I hate to request multiple CSS or JS files if I can help it. Loading the parent stylesheet with WordPress’ recommended <code class="language-plaintext highlighter-rouge">wp_enqueue_scripts</code> is going to end up making two calls – one for the parent stylesheet and one for the child. We don’t want none of that!</p>

<h2 id="heres-what-ive-done-to-get-around-loading-both-those-stylesheets">Here’s what I’ve done to get around loading both those stylesheets</h2>

<p>Using Sass, I just <code class="language-plaintext highlighter-rouge">@import</code> the parent theme’s <code class="language-plaintext highlighter-rouge">style.css</code>. That easy!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@import "../twentysixteen/style";

</code></pre></div></div>

<p>I can’t vouch for the reliability of this in all cases (relative paths for fonts or assets might not work in some themes), but it works for at least the Twenty Sixteen theme!</p>]]></content><author><name></name></author><category term="CSS" /><category term="Performance" /><category term="WordPress" /><summary type="html"><![CDATA[Loading stylesheets in WordPress child themes is a pretty straightforward process. According to the Codex, you just add a wp_enqueue_scripts action that loads the parent theme’s stylesheet as well as the child theme’s stylesheet. Easy peasy.]]></summary></entry><entry><title type="html">Our twist on BEM CSS modifiers</title><link href="http://localhost:4000/our-twist-on-bem-css-modifiers/" rel="alternate" type="text/html" title="Our twist on BEM CSS modifiers" /><published>2017-01-21T19:26:45-06:00</published><updated>2017-01-21T19:26:45-06:00</updated><id>http://localhost:4000/our-twist-on-bem-css-modifiers</id><content type="html" xml:base="http://localhost:4000/our-twist-on-bem-css-modifiers/"><![CDATA[<p>Over the past few years, I’ve found that the BEM CSS methodology falls closest in line with my preference for CSS authoring (although I do have a lot of respect for <a href="https://leanpub.com/enduringcss/c/blog">Enduring CSS</a>). The block (parent), element (child/grandchild) and modifier work for nearly every scenario. However, there was always one thing with BEM that drove me nuts – <strong>the way it recommends writing modifiers</strong>.</p>

<p>According to the official <a href="http://getbem.com/naming/">BEM</a> website, the way to declare modifiers is <code class="language-plaintext highlighter-rouge">.block__element--modifier</code>. The reasoning behind that is great, and it works well for short block names, but it leads to huge class strings in markup when you have multiple words in your block. And let’s face it, it’s extremely difficult to never use more than one word in a CSS class name. <code class="language-plaintext highlighter-rouge">.block</code> eventually becomes <code class="language-plaintext highlighter-rouge">.lego-block</code> because such a short ambiguous name is not intuitive. When you throw a modifier on that, the markup already starts to get lengthy – <code class="language-plaintext highlighter-rouge">lego-block lego-block--secondary</code>. If you have more than one modifier, you can definitely see the repetitive implications.</p>

<p>To get around this repetition, I wanted to simply remove the repeated text from the modifier. That would make <code class="language-plaintext highlighter-rouge">lego-block lego-block--secondary</code> simply <code class="language-plaintext highlighter-rouge">lego-block --secondary</code>. The double dashes are great because they visualize the fact that the text succeeding them is a modifier. There was one problem with that approach though – not all browsers support class selectors that don’t start with a letter.</p>

<p>So about a year I complained on Twitter about Safari (being the main culprit) not supporting class names that don’t start with a letter.</p>

<blockquote>
  <p>I started using standalone CSS state classes. Like .—state &amp; scope them to their main sibling classes. But it doesn’t work in Safari 🙁</p>

  <p>— Trevan Hetzel (@trevanhetzel) <a href="https://twitter.com/trevanhetzel/status/694914983742693376">February 3, 2016</a></p>
</blockquote>

<script async="" charset="utf-8" src="//platform.twitter.com/widgets.js"></script>

<p>And I got a brilliant response from <a href="https://twitter.com/dylanbaumann">Dylan Baumann</a> <em>(now a fellow front-end developer on my team at Flywheel)</em>.</p>

<blockquote>
  <p><a href="https://twitter.com/trevanhetzel">@trevanhetzel</a> <a href="https://twitter.com/agentkyle">@agentkyle</a> you might be able to circumvent it with:</p>

  <p>[class*=’-scope’] { // stuff }</p>

  <p>— Dylan Baumann (@dylanbaumann) <a href="https://twitter.com/dylanbaumann/status/694921669337419777">February 3, 2016</a></p>
</blockquote>

<script async="" charset="utf-8" src="//platform.twitter.com/widgets.js"></script>

<p>CSS attribute selectors, of course! With an attribute selector, you can still write <code class="language-plaintext highlighter-rouge">lego-block --secondary</code> in the markup and not have to worry about browsers not reading it.</p>

<p>I contemplated long and hard about officially adopting this for my projects and our projects at Flywheel for the sole fact that attribute selectors are nasty and lengthy and feel like a hack. But you gotta choose your battles and this was one that I was okay with losing a hand in order to not lose a leg. The clarity it’s brought to our markup is well worth any extra bytes in the compiled CSS file. And to further drive home my decision, I experimented and found that gzip does such a great job at compressing repetitive code that the file size implications are very minimal. I also considered selector performance but, after reviewing <a href="https://benfrain.com/css-performance-revisited-selectors-bloat-expensive-styles/">Ben Frain’s tests</a>, realized that shouldn’t be a worry at all.</p>

<h2 id="the-mixin">The mixin</h2>

<p>We use a Sass mixin called <code class="language-plaintext highlighter-rouge">state</code>. The word “state” is something we decided on as a team that we preferred over the word “modifier”.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@mixin state($class, $parent: nil) {
    &amp;[class*='--#{$class}'] {
        @content;
    }
}

</code></pre></div></div>

<p>The Sass usage is like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.lego-block {
    @include state(secondary) {
        // modifying code here
    }
}

</code></pre></div></div>

<p>And the HTML usage is simply <code class="language-plaintext highlighter-rouge">&lt;div class="lego-block --secondary"&gt;</code>.</p>]]></content><author><name>admin</name></author><category term="CSS" /><summary type="html"><![CDATA[Over the past few years, I’ve found that the BEM CSS methodology falls closest in line with my preference for CSS authoring (although I do have a lot of respect for Enduring CSS). The block (parent), element (child/grandchild) and modifier work for nearly every scenario. However, there was always one thing with BEM that drove me nuts – the way it recommends writing modifiers.]]></summary></entry><entry><title type="html">Single page WordPress themes with Timber, Twig and Backbone</title><link href="http://localhost:4000/wordpress-timber-twig-backbone/" rel="alternate" type="text/html" title="Single page WordPress themes with Timber, Twig and Backbone" /><published>2015-12-27T18:14:31-06:00</published><updated>2015-12-27T18:14:31-06:00</updated><id>http://localhost:4000/wordpress-timber-twig-backbone</id><content type="html" xml:base="http://localhost:4000/wordpress-timber-twig-backbone/"><![CDATA[<p>I wrote an <a href="http://trevan.co/front-end-wordpress-theme/">article</a> nearly a year ago about building a front-end WordPress theme using Backbone. Since then, I’ve done a lot more research and experimenting and have come up with a pretty solid way of developing “single-page-esque” WordPress themes with Backbone (or React/Flux, Angular, Ember or any other front-end framework).</p>

<p>My big hurdle earlier in the year was the concept of server-side vs. client-side rendering. I couldn’t think of a good way to serve content from the server and the client without having duplicate templates for PHP and JavaScript, which is very cumbersome and repetitive. To reiterate why I think this topic is important, I think it comes down to two things: speed and SEO. On an initial page load, it’s much faster to have all content served directly from the server. And, even though Google supposedly crawls JavaScript now, I still feel safer giving search engines content directly from the server.</p>

<h2 id="enter-timber">Enter Timber</h2>

<p>Luckily, I found a great solution to my rendering problems! It’s called <a href="http://upstatement.com/timber/">Timber</a>, a plugin that nicely pairs the <a href="http://twig.sensiolabs.org/">Twig templating engine</a> with WordPress. Timber alone is a cool way to structure a normal theme with Twig templates. But the key to my use of Timber is the pairing of it with the Twig JavaScript library, <a href="https://github.com/justjohn/twig.js/">Twig.js</a>. Which means, shared templates!</p>

<p>You can use one single Twig template for both the server-side and the client-side rendering. This doesn’t eliminate the different server-side/client-side logic you still have to have to populate the templates with data, but it makes things a lot easier.</p>

<h3 id="php-usage">PHP usage</h3>

<p>Without going terribly in-depth in this article (I have an example for that), the basic jist is that instead of writing WordPress loops in your PHP templates, you utilize Timber for that. A single.php template that was previously littered with logic and templating turns into a very simple file that looks something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?php get_header(); ?&gt;

&lt;?php
$data = Timber::get_context();
$data['post'] = new TimberPost();
Timber::render('templates/article.twig', $data);
?&gt;

&lt;?php get_footer(); ?&gt;

</code></pre></div></div>

<p>Timber does a lot of the heavy lifting of acquiring data for you, which is a huge plus.</p>

<h3 id="javascript-usage">JavaScript usage</h3>

<p>In the same way that you pass data into the .twig template using PHP, you do the same with your JavaScript framework. You don’t actually rely on the Timber plugin at all on the client side of things – just the Twig templates. The big difference is where the data is coming from. I’ve experimented with both using the <a href="http://v2.wp-api.org/">WP REST API</a> and creating my own endpoints with admin-ajx.php. The benefit to using the REST API is that it’s already set up for you. The downfall is that the data structure it outputs doesn’t always align with the way the loop outputs data, making for lots of if/else checks inside the template. I’ve always prescribed to the definition of templates being solely for displaying data and not for logic, so I ultimately decided it best to create my own endpoints using admin ajax. This allows you to customize the output before serving it up, making it match the structure of the loop more closely.</p>

<p>I might do some more research on the REST API in the future and see if I can’t just use it in PHP, which would allow you to use the same data structure both on the server and the client side.</p>

<h2 id="examples">Examples</h2>

<p>So far I’ve developed two sites that use the method described in this article: <a href="http://trevan.co">my blog</a> (you’re on it!) and our <a href="https://life.getflywheel.com/">culture blog</a> at Flywheel. Both use Backbone (just plain Backbone, although the next site I build like this will probably utilize Marionette), Timber, twig.js, Gulp and Browserify.</p>

<p>My blog is <a href="https://github.com/trevanhetzel/trevan.co">open sourced on GitHub</a>, so the entire theme is open for you to take a look at it. If you wish to install it locally to play around with, the only requisite (besides Node to run Gulp) is the <a href="https://wordpress.org/plugins/timber-library/">Timber plugin</a>.</p>

<p>With the completion of these two projects and the fact that they’re live and pulling in decent amounts of traffic, I’m pretty excited to develop this idea of WordPress client-side/server-side shared templating even further. Look forward for more detailed technical posts on the matter and maybe even an online course!</p>]]></content><author><name>admin</name></author><category term="Backbone" /><category term="JavaScript" /><category term="WordPress" /><summary type="html"><![CDATA[I wrote an article nearly a year ago about building a front-end WordPress theme using Backbone. Since then, I’ve done a lot more research and experimenting and have come up with a pretty solid way of developing “single-page-esque” WordPress themes with Backbone (or React/Flux, Angular, Ember or any other front-end framework).]]></summary></entry><entry><title type="html">New WordPress plugin: Smooth Directory</title><link href="http://localhost:4000/new-wordpress-plugin-smooth-directory/" rel="alternate" type="text/html" title="New WordPress plugin: Smooth Directory" /><published>2015-12-09T20:19:58-06:00</published><updated>2015-12-09T20:19:58-06:00</updated><id>http://localhost:4000/new-wordpress-plugin-smooth-directory</id><content type="html" xml:base="http://localhost:4000/new-wordpress-plugin-smooth-directory/"><![CDATA[<p>Check out my second ever WordPress plugin, Smooth Directory, now live on <a href="https://wordpress.org/plugins/smooth-directory/">WordPress.org</a>! I’ve kind of been developing this business directory plugin alongside the Smooth Calendar plugin I launched yesterday, working on the same client project. Smooth Directory solved my needs for a simple business directory, so hopefully it can solve yours as well.</p>

<p>Full details are available on the WordPress plugin page or on GitHub, but the quick rundown is that it’s a very simple responsive plugin that outputs a directory of businesses. Each business has optional fields that can be populated, including an image (perfect for company logos). Like Smooth Calendar, this plugin is built using a custom post type, which makes editing and adding businesses a breeze for clients.</p>

<p><a href="https://wordpress.org/plugins/smooth-directory/">Check it out</a>! And contribute as you see fit on <a href="https://github.com/trevanhetzel/smooth-directory">GitHub</a> 🙂</p>]]></content><author><name>admin</name></author><category term="WordPress" /><summary type="html"><![CDATA[Check out my second ever WordPress plugin, Smooth Directory, now live on WordPress.org! I’ve kind of been developing this business directory plugin alongside the Smooth Calendar plugin I launched yesterday, working on the same client project. Smooth Directory solved my needs for a simple business directory, so hopefully it can solve yours as well.]]></summary></entry><entry><title type="html">New WordPress plugin: Smooth Calendar</title><link href="http://localhost:4000/new-wordpress-plugin-smooth-calendar/" rel="alternate" type="text/html" title="New WordPress plugin: Smooth Calendar" /><published>2015-12-08T19:54:04-06:00</published><updated>2015-12-08T19:54:04-06:00</updated><id>http://localhost:4000/new-wordpress-plugin-smooth-calendar</id><content type="html" xml:base="http://localhost:4000/new-wordpress-plugin-smooth-calendar/"><![CDATA[<p>I’m excited to announce that my first ever WordPress plugin is now live on <a href="http://wordpress.org/plugins/smooth-calendar/">WordPress.org</a>! It’s called Smooth Calendar and it’s the smoothest calendar plugin you’ll ever use (see what I did there?).</p>

<p>I built the calendar a while back for a client and just got around to polishing it up to make it public. It’s built using the <a href="http://v2.wp-api.org/">WP REST API</a>, it’s responsive and it…well it just works. As a theme developer myself, I made sure that Smooth Calendar is as extendable as possible and specifically kept the styling to a minimum. That makes it a pretty good choice for developers to use on client sites to keep it in line with their theme.</p>

<p>You can see all the features, along with screenshots, either on the <a href="http://wordpress.org/plugins/smooth-calendar/">WordPress plugin page</a> or on <a href="https://github.com/trevanhetzel/smooth-calendar">GitHub</a> (pull requests and issues are welcome there). I have an article in the works about releasing your first WordPress plugin, so follow me on <a href="https://twitter.com/trevanhetzel">Twitter</a> if you’re interested in hearing about the nitty gritty details.</p>]]></content><author><name>admin</name></author><category term="WordPress" /><summary type="html"><![CDATA[I’m excited to announce that my first ever WordPress plugin is now live on WordPress.org! It’s called Smooth Calendar and it’s the smoothest calendar plugin you’ll ever use (see what I did there?).]]></summary></entry><entry><title type="html">Browser trends from a Shark Tank traffic spike</title><link href="http://localhost:4000/browser-trends-from-a-shark-tank-traffic-spike/" rel="alternate" type="text/html" title="Browser trends from a Shark Tank traffic spike" /><published>2015-11-18T09:28:15-06:00</published><updated>2015-11-18T09:28:15-06:00</updated><id>http://localhost:4000/browser-trends-from-a-shark-tank-traffic-spike</id><content type="html" xml:base="http://localhost:4000/browser-trends-from-a-shark-tank-traffic-spike/"><![CDATA[<p>For the past year I’ve been working with <a href="http://rentlikeachampion.com">Rent Like a Champion</a>, who recently sealed a sweet deal with Mark Cuban and Chris Sacca on <a href="http://abc.go.com/shows/shark-tank/episode-guide/season-07/06-week-6-rent-like-a-champion-hotshot-windcatcher-stem-center-usa">ABC’s Shark Tank</a>. I started contracting with them a little over a year ago by completely redesigning their website and coding up the front-end responsively. We had no idea at this time last year that an airing on the show was in our near future. But fortunately, when word came that Mike Doyle, the CEO, and Drew Mitchell, one of the founders, would be pitching the Sharks earlier this year, we had already spent a good 6 months on the responsive redesign. That was critical because, as you’ll see in this article, the viewing trends from users on the night of the show proved just how important it was to have a device agnostic web application.</p>

<p>In preparation for the airing, we didn’t really know how much traffic we would see the night of the show, but we had a general idea and a goal to aim for. Our CTO and two back-end engineers spent a good month or so prior to the airing setting up a very scalable infrastructure that relied on multiple load balancers and application and database servers. In the end we might have been over-prepared, as we didn’t see one hiccup from the traffic that hit the Server Central infrastructure. One of the biggest things we did was ensured that the server could cache the heck out of the home page and static pages. Aside from that, there wasn’t anything too spectacular done on the front-end in preparation for the show; I basically just made sure there would be no hangups, as I spent quite a bit of time on the front-end performance from the beginning when I started coding it.</p>

<p>The most intriguing part of the whole thing to me was the browser and device statistics. I watched the traffic in Google Analytics in real-time as the show was being aired and saw some pretty interesting trends. Here they are!</p>

<h2 id="80-of-traffic-came-from-phones-and-tablets">80% of traffic came from phones and tablets</h2>

<p>It makes sense that people watching a TV show would be browsing on a mobile device. It makes even more sense now after watching the analytics in real-time and seeing the stats firsthand. The biggest standout for me from that night was the fact that nearly 80% of our traffic came from phones and tablets. You always hear that “mobile is on the raise” but seeing it in action really drives that point home.</p>

<table>
  <thead>
    <tr>
      <th>Mobile</th>
      <th>60.79%</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Tablet</td>
      <td>18.33%</td>
    </tr>
    <tr>
      <td>Desktop</td>
      <td>20.88%</td>
    </tr>
  </tbody>
</table>

<p><small>Sessions breakdown from the Shark Tank airing night</small></p>

<p>Almost all of that mobile traffic was from unique visitors who entered the home page. 76.3% of them clicked through to another page, with the most popular being the Notre Dame listing page.</p>

<h2 id="people-like-iphones">People like iPhones</h2>

<p>Out of all the mobile/handheld device traffic, the overwhelmingly most popular device was the iPhone (54.7%), followed by the iPad (19.87%). The other fourth consisted mainly of Samsung S models and Motorola Droid Turbos and Ultras.</p>

<table>
  <thead>
    <tr>
      <th>Apple iPhone</th>
      <th>54.70%</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Apple iPad</td>
      <td>19.87%</td>
    </tr>
    <tr>
      <td>Samsung Galaxy S5</td>
      <td>3.53%</td>
    </tr>
    <tr>
      <td>Samsung Galaxy S4</td>
      <td>1.23%</td>
    </tr>
    <tr>
      <td>Samsung Galaxy S6</td>
      <td>0.96%</td>
    </tr>
    <tr>
      <td>Motorola Droid Turbo</td>
      <td>0.67%</td>
    </tr>
    <tr>
      <td>Motorola Droid Ultra</td>
      <td>0.65%</td>
    </tr>
    <tr>
      <td>Plethora of other devices</td>
      <td>18.39%</td>
    </tr>
  </tbody>
</table>

<p><small>Most popular mobile devices used to browse the site</small></p>

<h2 id="they-also-like-chrome">They also like Chrome</h2>

<p>Not surprisingly, Chrome was the most popular desktop browser. I was really happy to see that nearly all of the desktop traffic came from pretty modern browsers that can support a lot of the CSS3 properties I used throughout the site. The oldest browser was Internet Explorer 7, with only 2 visits.</p>

<table>
  <thead>
    <tr>
      <th>Chrome</th>
      <th>52.88%</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Safari</td>
      <td>18.34%</td>
    </tr>
    <tr>
      <td>Internet Explorer 11</td>
      <td>14.13%</td>
    </tr>
    <tr>
      <td>Firefox</td>
      <td>12.32%</td>
    </tr>
    <tr>
      <td>Internet Explorer 10</td>
      <td>1.43%</td>
    </tr>
    <tr>
      <td>IE 9, 8, 7 and Opera</td>
      <td>0.9%</td>
    </tr>
  </tbody>
</table>

<p><small>Most popular desktop browsers used to browse the site</small></p>

<h2 id="and-they-came-in-droves">And they came in droves</h2>

<p>Out of all the statistics, the sheer volume of traffic within a 20 minute period was the most incredible thing to watch. We saw over a 1,000% increase in visitors compared to the day before the show aired. But like all good things, it came to an end (quickly). Traffic has gone more or less back to normal now (about 2.5 weeks after the airing), with just a bit of an increase in average daily sessions. Desktop visits are now back up to about 45% of the total traffic with Chrome still being the most popular, as homeowners and renters take back over as the majority of our traffic.</p>

<p>In closing, I’ll leave you with this line graph from Google Analytics…</p>

<p><img src="http://trevan.co/wp-content/uploads/2015/11/shark-tank-wave-1024x180.png" alt="Shark Tank wave" /></p>]]></content><author><name>admin</name></author><category term="Performance" /><category term="Responsive" /><summary type="html"><![CDATA[For the past year I’ve been working with Rent Like a Champion, who recently sealed a sweet deal with Mark Cuban and Chris Sacca on ABC’s Shark Tank. I started contracting with them a little over a year ago by completely redesigning their website and coding up the front-end responsively. We had no idea at this time last year that an airing on the show was in our near future. But fortunately, when word came that Mike Doyle, the CEO, and Drew Mitchell, one of the founders, would be pitching the Sharks earlier this year, we had already spent a good 6 months on the responsive redesign. That was critical because, as you’ll see in this article, the viewing trends from users on the night of the show proved just how important it was to have a device agnostic web application.]]></summary></entry><entry><title type="html">Managing critical CSS in a WP theme</title><link href="http://localhost:4000/managing-critical-css-in-a-wp-theme/" rel="alternate" type="text/html" title="Managing critical CSS in a WP theme" /><published>2015-05-15T20:23:11-05:00</published><updated>2015-05-15T20:23:11-05:00</updated><id>http://localhost:4000/managing-critical-css-in-a-wp-theme</id><content type="html" xml:base="http://localhost:4000/managing-critical-css-in-a-wp-theme/"><![CDATA[<p>If you’ve been keeping up with the latest in front-end performance trends, you’ve no doubt heard of, and hopefully played around with, “critical CSS”. If you haven’t, go check out Scott Jehl’s <a href="http://www.filamentgroup.com/lab/performance-rwd.html">article</a> on perceived performance first. Basically, to help with a site’s perceived performance, you can inline in the <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> only the styles that are critical for rendering the above-the-fold content that a user first sees upon visiting your site. Then, the full stylesheet is loaded in asyncrhonously. It works wonders! But, in all honesty, it kind of sucks to manage. Which is why I’d like to share a little workflow that I use when developing WordPress themes.</p>

<h2 id="generating-critical-css">Generating critical CSS</h2>

<p>The best way to grab critical styles from a page is by using Grunt (or other task runner) paired with a task like <a href="https://github.com/bezoerb/grunt-critical">grunt-critical</a> or <a href="https://github.com/filamentgroup/grunt-criticalcss">grunt-criticalcss</a>. Whenever you finish a page, just run it through the Grunt task and, voila, your critical styles are ready for use.</p>

<p>I don’t always have the greatest luck using the aforementioned tools, however, so lately I’ve just been using the <a href="http://jonassebastianohlsson.com/criticalpathcssgenerator/">Penthouse web generator</a>.</p>

<h2 id="inlining-critical-css">Inlining critical CSS</h2>

<p>If I wasn’t using WordPress (didn’t have to worry about a “global” header), I’d just throw the critical styles in a <code class="language-plaintext highlighter-rouge">&lt;style&gt;</code> tag and then load in the full stylesheet asynchronously using Filament Group’s <a href="https://github.com/filamentgroup/loadCSS">loadCSS</a>.</p>

<p>Like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;style&gt;&lt;!-- Critical styles here --&gt;&lt;/style&gt;

&lt;script&gt;
    // minified loadCSS function
    function loadCSS(e,n,o,t){"use strict";var d=window.document.createElement("link"),i=n||window.document.getElementsByTagName("script")[0],s=window.document.styleSheets;return d.rel="stylesheet",d.href=e,d.media="only x",t&amp;&amp;(d.onload=t),i.parentNode.insertBefore(d,i),d.onloadcssdefined=function(n){for(var o,t=0;t&lt;s.length;t++)s[t].href&amp;&amp;s[t].href.indexOf(e)&gt;-1&amp;&amp;(o=!0);o?n():setTimeout(function(){d.onloadcssdefined(n)})},d.onloadcssdefined(function(){d.media=o||"all"}),d}
    loadCSS("path/to/style.css");
&lt;/script&gt;
&lt;noscript&gt;&lt;link href="path/to/style.css" rel="stylesheet"&gt;&lt;/noscript&gt;

</code></pre></div></div>

<p>Doing this in a WordPress theme is a little more tricky though, because each template is going to have a different set of critical styles. So what I’ve been doing is assigning a variable in each template file to that page’s critical CSS after I generate it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?php global $critical;
$critical = 'your critical styles here'';
/* Template Name: Whatever */
get_header(); ?&gt;

</code></pre></div></div>

<p><em>Note: It’s important to set that as a global variable so it can be accessed in the <code class="language-plaintext highlighter-rouge">header.php</code> file.</em></p>

<p>Then in <code class="language-plaintext highlighter-rouge">header.php</code>, I first check that a <code class="language-plaintext highlighter-rouge">$critical</code> variable is available. If it is, that’s where I inline those critical styles and use the loadCSS function. If <code class="language-plaintext highlighter-rouge">$critical</code> is not available, I just load the stylesheet normally using a <code class="language-plaintext highlighter-rouge">&lt;link&gt;</code> tag. It’s helpful to have that as a fallback in case you forget to grab the critical styles for a give template or just don’t want to.</p>

<p>The final code in <code class="language-plaintext highlighter-rouge">header.php</code> looks like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?php global $critical;
    if ($critical): ?&gt;
        &lt;style&gt;&lt;?php echo $critical ?&gt;&lt;/style&gt;

        &lt;script&gt;
            // minified loadCSS function
            function loadCSS(e,n,o,t){"use strict";var d=window.document.createElement("link"),i=n||window.document.getElementsByTagName("script")[0],s=window.document.styleSheets;return d.rel="stylesheet",d.href=e,d.media="only x",t&amp;&amp;(d.onload=t),i.parentNode.insertBefore(d,i),d.onloadcssdefined=function(n){for(var o,t=0;t&lt;s.length;t++)s[t].href&amp;&amp;s[t].href.indexOf(e)&gt;-1&amp;&amp;(o=!0);o?n():setTimeout(function(){d.onloadcssdefined(n)})},d.onloadcssdefined(function(){d.media=o||"all"}),d}
            loadCSS("path/to/style.css");
        &lt;/script&gt;
        &lt;noscript&gt;&lt;link href="path/to/style.css" rel="stylesheet"&gt;&lt;/noscript&gt;
    &lt;?php else: ?&gt;
        &lt;link href="path/to/style.css" rel="stylesheet"&gt;
    &lt;?php endif; ?&gt;

</code></pre></div></div>

<h2 id="caching-and-cookies">Caching and cookies</h2>

<p>Depending on how users typically get to your site, the most common thing that happens is that a user comes to your home page, sees content quickly because of the inlined critical CSS, then navigates in to another page. Well, since the full stylesheet will have already been loaded by the time they go to another page in your site, that stylesheet is most likely going to be cached by their browser. Thus, using critical styles on those internal pages actually add <strong>more</strong> weight to the page (albeit not much) because inline styles can’t be cached. This scenario, again, is just the most common one. It’s still good to inline critical styles on internal pages because users will not always go through your home page to get to them and still deserve a snappy experience.</p>

<p>To make sure you’re never inlining critical styles that don’t need to be inlined, you can take advantage of cookies. If a certain cookie is set, don’t inline critical styles. If it’s not set, inline critical styles and set that cookie.</p>

<p>Here’s the <em>final</em> final code I’ve been using:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?php if(isset($_COOKIE['critical_css'])): ?&gt;
    &lt;link href="path/to/style.css" rel="stylesheet"&gt;
&lt;?php global $critical;
elseif ($critical): ?&gt;
    &lt;style&gt;&lt;?php echo $critical ?&gt;&lt;/style&gt;

    &lt;script&gt;
        // minified loadCSS function
        function loadCSS(e,n,o,t){"use strict";var d=window.document.createElement("link"),i=n||window.document.getElementsByTagName("script")[0],s=window.document.styleSheets;return d.rel="stylesheet",d.href=e,d.media="only x",t&amp;&amp;(d.onload=t),i.parentNode.insertBefore(d,i),d.onloadcssdefined=function(n){for(var o,t=0;t&lt;s.length;t++)s[t].href&amp;&amp;s[t].href.indexOf(e)&gt;-1&amp;&amp;(o=!0);o?n():setTimeout(function(){d.onloadcssdefined(n)})},d.onloadcssdefined(function(){d.media=o||"all"}),d}
            loadCSS("path/to/style.css");
    &lt;/script&gt;
    &lt;noscript&gt;&lt;link href="path/to/style.css" rel="stylesheet"&gt;&lt;/noscript&gt;

    // Set cookie here
&lt;?php else: ?&gt;
    &lt;link href="path/to/style.css" rel="stylesheet"&gt;
&lt;?php endif; ?&gt;

</code></pre></div></div>]]></content><author><name>admin</name></author><category term="Performance" /><category term="WordPress" /><summary type="html"><![CDATA[If you’ve been keeping up with the latest in front-end performance trends, you’ve no doubt heard of, and hopefully played around with, “critical CSS”. If you haven’t, go check out Scott Jehl’s article on perceived performance first. Basically, to help with a site’s perceived performance, you can inline in the &lt;head&gt; only the styles that are critical for rendering the above-the-fold content that a user first sees upon visiting your site. Then, the full stylesheet is loaded in asyncrhonously. It works wonders! But, in all honesty, it kind of sucks to manage. Which is why I’d like to share a little workflow that I use when developing WordPress themes.]]></summary></entry><entry><title type="html">Giving your first technical talk</title><link href="http://localhost:4000/giving-your-first-technical-talk/" rel="alternate" type="text/html" title="Giving your first technical talk" /><published>2015-04-26T20:22:48-05:00</published><updated>2015-04-26T20:22:48-05:00</updated><id>http://localhost:4000/giving-your-first-technical-talk</id><content type="html" xml:base="http://localhost:4000/giving-your-first-technical-talk/"><![CDATA[<p>I did something yesterday that’s always haunted me. I stood in front of an audience and gave a presentation. I was almost crippled by nerves the entire two days leading up to it. It wasn’t fun. I’ve given talks in the past, but only via the internet. Standing in front of a crowd was a whole new level for me. There wasn’t a happy ending for me after doing it either. I screwed up my delivery and stuttered and forgot things and stood like a statue staring into my laptop screen.</p>

<p>At least that’s <em>my</em> perception of how it went down.</p>

<p>While it was extremely uncomfortable and scary, I’m going to talk again. And again. Until I’m good at it. I wanted to write this while the feelings are still strong, to encourage others that even though it probably will suck, you will get through it and want to do it again.</p>

<h2 id="lessons-learned">Lessons learned</h2>

<p>The biggest lesson I learned was simply that life goes on after the talk. I woke up yesterday wanting to throw up, putting everything else aside in fear that I would somehow have a literal heart attack and die right there on stage or something. I woke up this morning feeling invigorated to do it again.</p>

<h3 id="practice-your-slides-the-same-way-that-youll-be-looking-at-them-when-giving-the-talk">Practice your slides the same way that you’ll be looking at them when giving the talk</h3>

<p>I had practiced the week before by looking at Keynote in the editor mode. When I presented, I used the presenter mode. That turned out to be a bad mistake, as I kept getting confused as to what slide or bullet point I was on, which lead to anxiety while giving the talk.</p>

<h3 id="write-out-the-opening-few-slides">Write out the opening few slides</h3>

<p>At the last minute I decided to write out, word for word, the first few slides (my introduction). I don’t think that’s usually advised, but it turned out to really help get the nerves calmed down and adjust to hearing your voice in front of an audience.</p>

<h3 id="use-a-remote">Use a remote</h3>

<p>I stood behind a pedestal with my face down, not showing any emotion or excitement about what I was talking about. Next time, I’ll use a wireless mic and walk around, which will in turn not make me rely on the exact words I wrote down and make for a more sincere presentation.</p>

<h3 id="shake-off-the-mistakes">Shake off the mistakes</h3>

<p>When you make a mistake or forget to say something, only you know. Your audience doesn’t know how your talk is supposed to go. And when you get physically shaken up (stutter or go blank), don’t think that the rest of your presentation is ruined. Just get back in the flow, shake it off and forget about it.</p>

<h3 id="dont-take-it-so-seriously">Don’t take it so seriously</h3>

<p>In reality, giving a talk is not (usually) a make or break thing. You’ll do worse if you put too much pressure on yourself.</p>

<h3 id="relax">Relax</h3>

<p><a href="http://webdevstudios.com/team/lisa-sabin-wilson/">Lisa Sabin-Wilson</a> from WebDev Studios told me something before my talk that I’ll never forget:</p>

<p>(paraphrasing)</p>

<blockquote>
  <p>“People want you to do well. They’re there to learn and take inspiration from you, not to pick out the flaws in your presentation.”</p>
</blockquote>

<h2 id="you-did-fine">You did fine</h2>

<p>For the record, even when you feel like you did the worst you could do, you most likely did okay.</p>

<blockquote>
  <p><a href="https://twitter.com/trevanhetzel">@trevanhetzel</a> excellent job on the presentation yesterday. I learned a lot.</p>

  <p>— mlaulun (@mlaulun) <a href="https://twitter.com/mlaulun/status/592689945929744387">April 27, 2015</a></p>
</blockquote>

<blockquote>
  <p><a href="https://twitter.com/trevanhetzel">@trevanhetzel</a> Your <a href="https://twitter.com/WordCampMpls">@WordCampMpls</a> was amazing. Couldn’t tell it was your first. Keep on Keeping on! <a href="https://twitter.com/hashtag/FlyThatWheel?src=hash">#FlyThatWheel</a></p>

  <p>— Russell Aaron (@KrashKartMedia) <a href="https://twitter.com/KrashKartMedia/status/592773623963877376">April 27, 2015</a></p>
</blockquote>

<script async="" charset="utf-8" src="//platform.twitter.com/widgets.js"></script>]]></content><author><name>admin</name></author><category term="Business &amp;amp; Tech" /><summary type="html"><![CDATA[I did something yesterday that’s always haunted me. I stood in front of an audience and gave a presentation. I was almost crippled by nerves the entire two days leading up to it. It wasn’t fun. I’ve given talks in the past, but only via the internet. Standing in front of a crowd was a whole new level for me. There wasn’t a happy ending for me after doing it either. I screwed up my delivery and stuttered and forgot things and stood like a statue staring into my laptop screen.]]></summary></entry></feed>